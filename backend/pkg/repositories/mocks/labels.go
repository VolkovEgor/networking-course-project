// Code generated by MockGen. DO NOT EDIT.
// Source: yak/backend/pkg/repositories (interfaces: Label)

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"
	models "yak/backend/pkg/models"

	gomock "github.com/golang/mock/gomock"
)

// MockLabel is a mock of Label interface.
type MockLabel struct {
	ctrl     *gomock.Controller
	recorder *MockLabelMockRecorder
}

// MockLabelMockRecorder is the mock recorder for MockLabel.
type MockLabelMockRecorder struct {
	mock *MockLabel
}

// NewMockLabel creates a new mock instance.
func NewMockLabel(ctrl *gomock.Controller) *MockLabel {
	mock := &MockLabel{ctrl: ctrl}
	mock.recorder = &MockLabelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLabel) EXPECT() *MockLabelMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLabel) Create(arg0 *models.Label) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLabelMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLabel)(nil).Create), arg0)
}

// CreateInTask mocks base method.
func (m *MockLabel) CreateInTask(arg0, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInTask", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInTask indicates an expected call of CreateInTask.
func (mr *MockLabelMockRecorder) CreateInTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInTask", reflect.TypeOf((*MockLabel)(nil).CreateInTask), arg0, arg1)
}

// Delete mocks base method.
func (m *MockLabel) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLabelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLabel)(nil).Delete), arg0)
}

// DeleteInTask mocks base method.
func (m *MockLabel) DeleteInTask(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInTask indicates an expected call of DeleteInTask.
func (mr *MockLabelMockRecorder) DeleteInTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInTask", reflect.TypeOf((*MockLabel)(nil).DeleteInTask), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockLabel) GetAll(arg0 int) ([]*models.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*models.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockLabelMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockLabel)(nil).GetAll), arg0)
}

// GetAllInTask mocks base method.
func (m *MockLabel) GetAllInTask(arg0 int) ([]*models.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInTask", arg0)
	ret0, _ := ret[0].([]*models.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInTask indicates an expected call of GetAllInTask.
func (mr *MockLabelMockRecorder) GetAllInTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInTask", reflect.TypeOf((*MockLabel)(nil).GetAllInTask), arg0)
}

// GetById mocks base method.
func (m *MockLabel) GetById(arg0 int) (*models.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*models.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockLabelMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockLabel)(nil).GetById), arg0)
}

// Update mocks base method.
func (m *MockLabel) Update(arg0 int, arg1 *models.UpdateLabel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLabelMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLabel)(nil).Update), arg0, arg1)
}
